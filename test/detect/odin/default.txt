len()
 len()
alen()
(len())
a.len()


ï»¿gl.clear(gl.ClearFlags.COLOR_BUFFER);
is_between :: proc(v, min, max : int) -> bool #inline {
   return v >= min && v <= max;
}

make(awdsa)


make_frame_time_list :: proc(size : int) -> ^FrameTimeList {
   result := new(FrameTimeList);
   result.values = make([]f32, size);
   result.max_value = 0;
   result.min_value = 100000;
   result.write_head = 0;
   return result;
}

add_frame_time :: proc(list : ^FrameTimeList, value : f32) {
   list.values[list.write_head] = value;

   if list.values[list.write_head] > list.max_value {
       list.max_value = list.values[list.write_head];
       list.max_value_write_pos = list.write_head;
   }

   if list.max_value_write_pos == list.write_head {
       max : f32 = 0;
       max_pos := 0;
       for i := 0; i < len(list.values); i += 1 {
           if list.values[i] > max {
               max = list.values[i];
               max_pos = i;
           }
       }

       list.max_value = max;
       list.max_value_write_pos = max_pos;
   }

   if list.min_value_write_pos == list.write_head {
       min : f32 = 100000;
       min_pos := 0;
       for i := 0; i < len(list.values); i += 1 {
           if list.values[i] < min {
               min = list.values[i];
               min_pos = i;
           }
       }

       list.min_value = min;
       list.min_value_write_pos = min_pos;
   }

   if list.write_head < len(list.values)-1 {
       list.write_head += 1;
   } else {
       list.write_head = 0;
   }
}
